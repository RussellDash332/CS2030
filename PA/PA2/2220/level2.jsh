Pair<Integer,Integer> p = Pair.of(5, 5)
Predicate<Pair<Integer, Integer>> pred = pair -> pair.first() == pair.second()
Function<Pair<Integer, Integer>, Integer> f = pair -> pair.first() * pair.first()
DnC<Pair<Integer,Integer>, Integer> dnc = DnC.of(p, pred, f)
dnc.solve()
p = Pair.of(5, 7)
dnc = DnC.of(p, pred, f)
dnc.solve()
DnC.of(List.of(1), list -> list.size() == 1, list -> list.get(0)).solve()
DnC.of(List.of(1, 2, 3), list -> list.size() == 1, list -> list.get(0)).solve()